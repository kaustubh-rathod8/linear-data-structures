import java.util.*;
public class Main {
static Scanner sc = new Scanner(System.in);
static void swap(int[] arr, int i, int j) {
int temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
int n = arr.length;
printArray(arr, n);
}
static int partition(int[] arr, int low, int high)
{
int pivot = arr[high];
int i = (low - 1);
for (int j = low; j <= high - 1; j++) {
if (arr[j] < pivot) {
i++;
swap(arr, i, j);
}
}
swap(arr, i + 1, high);
return (i + 1);
}
static void quickSort(int[] arr, int low, int high) {
if (low < high) {
int pi = partition(arr, low, high);
quickSort(arr, low, pi - 1);
quickSort(arr, pi + 1, high);
}
}
void merge(int arr[], int l, int m, int r)
{
int n1 = m - l + 1;
int n2 = r - m;
int L[] = new int[n1];
int R[] = new int[n2];
for (int i = 0; i < n1; ++i)
L[i] = arr[l + i];
for (int j = 0; j < n2; ++j)
R[j] = arr[m + 1 + j];
int i = 0, j = 0;
int k = l;
while (i < n1 && j < n2) {
if (L[i] <= R[j]) {
arr[k] = L[i];
i++;
} else {
arr[k] = R[j];
j++;
}
k++;
}
while (i < n1) {
arr[k] = L[i];
i++;
k++;
}
while (j < n2) {
arr[k] = R[j];
j++;
k++;
}
int z = arr.length;
printArray(arr,z);
}
void sort(int arr[], int l, int r) {
if (l < r) {
int m = l + (r - l) / 2;
sort(arr, l, m);
sort(arr, m + 1, r);
merge(arr, l, m, r);
}
}
static void printArray(int[] arr, int size)
{
for (int i = 0; i < size; i++)
System.out.print(arr[i] + " ");
System.out.println();
}
public static void main(String[] args) {
int n,ch;
Main ob = new Main();
do
{
System.out.println();
System.out.println("Enter the choice ");
System.out.println("1> For Sorting array using Merge Sort ");
System.out.println("2> For Sorting array using Quick Sort ");
System.out.println("3> For Exit ");
ch = sc.nextInt();
if(ch==3)
{
break;
}
System.out.println("Enter the size of array");
n = sc.nextInt();
int arr[] = new int[n];
System.out.println("Enter numbers:");
for (int i = 0; i < n; i++) {
arr[i] = sc.nextInt();
}
System.out.println("Your entered unsorted array is ");
printArray(arr, n);
switch (ch) {
case 1:
System.out.println("Sorting array using Merge Sort ");
ob.sort(arr, 0, arr.length - 1);
break;
case 2:
System.out.println("Sorting array using Quick Sort ");
quickSort(arr, 0, n - 1);
break;
}
}while(ch!=3);
}
}
